#! /usr/bin/env node

// The MIT License (MIT)
// =====================
//
// Copyright © 2018 Fabian Henneke
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the “Software”), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

/*************************************************************************
 *  Modified from MathJax-demos-node direct/tex2svg-page by Fabian Henneke
 *
 *  Original copyright and licensing information:
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2018 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

//
//  Load the packages needed for MathJax
//

const {mathjax} = require('mathjax-full/js/mathjax.js');
const {TeX} = require('mathjax-full/js/input/tex.js');
const {SVG} = require('mathjax-full/js/output/svg.js');
const {CHTML} = require('mathjax-full/js/output/chtml.js');
const {liteAdaptor} = require('mathjax-full/js/adaptors/liteAdaptor.js');
const {RegisterHTMLHandler} = require('mathjax-full/js/handlers/html.js');
const {AssistiveMmlHandler} = require('mathjax-full/js/a11y/assistive-mml.js');

const {AllPackages} = require('mathjax-full/js/input/tex/AllPackages.js');

require('mathjax-full/js/util/entities/all.js');

//
//  Get the command-line arguments
//
var argv = require('yargs')
    .demand(0).strict()
    .usage('$0 [options] < input.json > output.json')
    .options({
        em: {
            default: 12,
            describe: 'em-size in pixels'
        },
        ex: {
            default: 6,
            describe: 'ex-size in pixels'
        },
        singleDollars: {
            default: false,
            type: 'boolean'
        },
        output: {
            default: 'SVG',
            choices: ['SVG', 'CommonHTML']
        }
    })
    .argv;

//
//  Read input JSON from stdin
//
const inputDocs = JSON.parse(require('fs').readFileSync(0, 'utf8'));

//
//  Create DOM adaptor and register it for HTML documents
//
const adaptor = liteAdaptor({fontSize: argv.em});
AssistiveMmlHandler(RegisterHTMLHandler(adaptor));

//
//  Create input and output jax and a document using them on the content from the HTML file
//
function getInput() {
    const options = {packages: AllPackages};
    if (argv.singleDollars) {
        options.inlineMath = [['$', '$'], ['\\(', '\\)']]
    }
    return new TeX(options);
}

function getOutput() {
    const options = {exFactor: argv.ex / argv.em};
    switch (argv.output) {
        case 'SVG':
            return new SVG({...options, fontCache: 'global'});
        case 'CommonHTML':
            return new CHTML({...options, fontURL: 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/output/chtml/fonts/woff-v2'});
        default:
            throw new Error('Unrecognized output format: ' + argv.output);
    }
}

const outputDocs = {};

// For each input path and HTML doc
Object.keys(inputDocs).forEach((path) => {
    console.error("mathjaxify:", path);
    const inputHTML = inputDocs[path];
    const html = mathjax.document(inputHTML, {InputJax: getInput(), OutputJax: getOutput()});

    //
    //  Typeset the document
    //
    html.render();

    //
    //  If no math was found on the page, remove the stylesheet and font cache (if any)
    //
    if (argv.output === "SVG" && ( Array.from(html.math).length === 0 )) {
        adaptor.remove(html.outputJax.svgStyles);
        const cache = adaptor.elementById(adaptor.body(html.document), 'MJX-SVG-global-cache');
        if (cache) adaptor.remove(cache);
    }

    //
    //  Store the resulting HTML in the output
    //
    outputDocs[path] = adaptor.doctype(html.document)
                        + "\n"
                        + adaptor.outerHTML(adaptor.root(html.document));
});

// Write out all the documents in JSON format
console.log(JSON.stringify(outputDocs));
